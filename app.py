import streamlit as st
from image_to_text import predict_step

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    st.set_page_config(page_title="Image Captioning App", layout="wide", page_icon="üñºÔ∏è")
    st.title("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚ú®")
    
    # –°—Ç–∏–ª–∏
    st.markdown(
        """
        <style>
        .small-text {
            font-size: 18px !important;
            color: #3E3E3E;
            font-family: 'Arial', sans-serif;
        }
        .large-text {
            font-size: 32px !important;
            font-weight: bold;
            color: #2E2E2E;
            font-family: 'Arial', sans-serif;
        }
        .file-uploader-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 300px;
            margin-bottom: 20px;
        }
        .file-uploader {
            height: 100%;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 2px dashed #ccc;
            border-radius: 10px;
            padding: 20px;
            cursor: pointer;
        }
        </style>
        """, unsafe_allow_html=True)
    
    # –í–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    st.markdown('<p class="small-text">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–æ!</p>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    if "uploaded_file" not in st.session_state:
        st.session_state.uploaded_file = None
    if "image_description" not in st.session_state:
        st.session_state.image_description = None
    if "last_uploaded_file" not in st.session_state:
        st.session_state.last_uploaded_file = None
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with st.container():
        st.markdown("### –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", unsafe_allow_html=True)
        uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"], label_visibility="collapsed")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if uploaded_file is not None and uploaded_file != st.session_state.last_uploaded_file:
        st.session_state.uploaded_file = uploaded_file
        st.session_state.last_uploaded_file = uploaded_file
        st.session_state.image_description = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([1, 2])
    
    if st.session_state.uploaded_file is not None:
        with col1:
            st.image(st.session_state.uploaded_file, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
        
        with col2:
            if st.session_state.image_description is None:
                st.markdown("### –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                with st.spinner("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open("temp_image.jpg", "wb") as f:
                        f.write(st.session_state.uploaded_file.getbuffer())
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    result = predict_step(['temp_image.jpg'])
                    st.session_state.image_description = result[0]
                    st.rerun()
            else:
                st.markdown('<p class="large-text">–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</p>', unsafe_allow_html=True)
                st.markdown(f'<p class="large-text">{st.session_state.image_description}</p>', unsafe_allow_html=True)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
